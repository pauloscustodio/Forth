//-----------------------------------------------------------------------------
// C++ implementation of a Forth interpreter
// Copyright (c) Paulo Custodio, 2020-2025
// License: GPL3 https://www.gnu.org/licenses/gpl-3.0.html
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// PAD
//-----------------------------------------------------------------------------
"PAD", PAD, 0, "push(mem_addr(vm.pad->pad()));"

//-----------------------------------------------------------------------------
// base conversion
//-----------------------------------------------------------------------------
"DECIMAL", DECIMAL, 0, "vm.user->BASE = 10;"
"HEX", HEX, 0, "vm.user->BASE = 16;"

//-----------------------------------------------------------------------------
// arithmetic
//-----------------------------------------------------------------------------
"+", PLUS, 0, "push(pop() + pop());"
"*", MULT, 0, "push(pop() * pop());"
"-", MINUS, 0, "int b = pop(), a = pop(); push(a - b);"
"/", DIV, 0, "int b = pop(), a = pop(); push(f_div(a, b));"
"MOD", MOD, 0, "int b = pop(), a = pop(); push(f_mod(a, b));"
"/MOD", DIV_MOD, 0, "f_div_mod();"
"*/", MULT_DIV, 0, "f_mul_div();"
"*/MOD", MULT_DIV_MOD, 0, "f_mul_div_mod();"
"FM/MOD", FM_DIV_MOD, 0, "f_fm_div_mod();"
"UM/MOD", UM_DIV_MOD, 0, "f_um_div_mod();"
"SM/REM", SM_DIV_REM, 0, "f_sm_div_rem();"
"M*", M_STAR, 0, "dint b = pop(), a = pop(); dpush(a * b);"
"1+", ONE_PLUS, 0, "push(pop() + 1);"
"1-", ONE_MINUS, 0, "push(pop() - 1);"
"2*", TWO_MULT, 0, "push(pop() * 2);"
"2/", TWO_DIV, 0, "push(f_div(pop(), 2));"
"NEGATE", NEGATE, 0, "push(-pop());"
"S>D", S_TO_D, 0, "dpush(pop());"
"UM*", UM_MULT, 0, "udint b = static_cast<uint>(pop()), a = static_cast<uint>(pop()); dpush(a * b);"
"ABS", ABS, 0, "push(f_abs(pop()));"
"MAX", FMAX, 0, "push(f_max(pop(), pop()));"
"MIN", FMIN, 0, "push(f_min(pop(), pop()));"
"CHAR+", CHAR_PLUS, 0, "push(pop() + 1);"
"CHARS", CHARS, 0, "push(pop() * 1);"
"CELL+", CELL_PLUS, 0, "push(pop() + CELL_SZ);"
"CELLS", CELLS, 0, "push(pop() * CELL_SZ);"
"WITHIN", WITHIN, 0, "f_within();"

//-----------------------------------------------------------------------------
// logical
//-----------------------------------------------------------------------------
"AND", AND, 0, "push(pop() & pop());"
"OR", OR, 0, "push(pop() | pop());"
"XOR", XOR, 0, "push(pop() ^ pop());"
"INVERT", INVERT, 0, "push(~pop());"
"LSHIFT", LSHIFT, 0, "int n = pop(), a = pop(); push(a << n);"
"RSHIFT", RSHIFT, 0, "int n = pop(), a = pop(); push(a >> n);"

//-----------------------------------------------------------------------------
// comparison
//-----------------------------------------------------------------------------
"=", EQUAL, 0, "push(f_bool(pop() == pop()));"
"<>", DIFFERENT, 0, "push(f_bool(pop() != pop()));"
"<", LESS, 0, "int b = pop(), a = pop(); push(f_bool(a < b));"
"<=", LESS_EQUAL, 0, "int b = pop(), a = pop(); push(f_bool(a <= b));"
">", GREATER, 0, "int b = pop(), a = pop(); push(f_bool(a > b));"
">=", GREATER_EQUAL, 0, "int b = pop(), a = pop(); push(f_bool(a >= b));"

"U<", U_LESS, 0, "uint b = pop(), a = pop(); push(f_bool(a < b));"
"U<=", U_LESS_EQUAL, 0, "uint b = pop(), a = pop(); push(f_bool(a <= b));"
"U>", U_GREATER, 0, "uint b = pop(), a = pop(); push(f_bool(a > b));"
"U>=", U_GREATER_EQUAL, 0, "uint b = pop(), a = pop(); push(f_bool(a >= b));"

"0=", ZERO_EQUAL, 0, "push(f_bool(pop() == 0));"
"0<>", ZERO_DIFFERENT, 0, "push(f_bool(pop() != 0));"
"0<", ZERO_LESS, 0, "push(f_bool(pop() < 0));"
"0<=", ZERO_LESS_EQUAL, 0, "push(f_bool(pop() <= 0));"
"0>", ZERO_GREATER, 0, "push(f_bool(pop() > 0));"
"0>=", ZERO_GREATER_EQUAL, 0, "push(f_bool(pop() >= 0));"

//-----------------------------------------------------------------------------
// memory access
//-----------------------------------------------------------------------------
"!", STORE, 0, "int a = pop(), v = pop(); store(a, v);"
"@", FETCH, 0, "push(fetch(pop()));"
"+!", PLUS_STORE, 0, "int a = pop(), v = pop(); store(a, fetch(a) + v);"
"C!", CSTORE, 0, "int a = pop(), v = pop(); cstore(a, v);"
"C@", CFETCH, 0, "push(cfetch(pop()));"
"2!", TWO_STORE, 0, "int a = pop(); dstore(a, dpop());"
"2@", TWO_FETCH, 0, "dpush(dfetch(pop()));"
"FILL", FILL, 0, "int c = pop(), n = pop(), a = pop(); vm.mem.fill(a, n, c);"
"ERASE", ERASE, 0, "int n = pop(), a = pop(); vm.mem.erase(a, n);"
"MOVE", MOVE, 0, "int n = pop(), dst = pop(), src = pop(); vm.mem.move(src, dst, n);"

//-----------------------------------------------------------------------------
// parameter stack
//-----------------------------------------------------------------------------
"DROP", DROP, 0, "pop();"
"SWAP", SWAP, 0, "int a = pop(), b = pop(); push(a); push(b);"
"DUP", DUP, 0, "push(peek(0));"
"?DUP", Q_DUP, 0, "int a = peek(); if (a) push(a);"
"OVER", OVER, 0, "push(peek(1));"
"ROT", ROT, 0, "int c = pop(), b = pop(), a = pop(); push(b); push(c); push(a);"
"-ROT", MINUS_ROT, 0, "int c = pop(), b = pop(), a = pop(); push(c); push(a); push(b);"
"NIP", NIP, 0, "int a = pop(); pop(); push(a);"
"PICK", PICK, 0, "push(peek(pop()));"
"ROLL", ROLL, 0, "roll(pop());"
"TUCK", TUCK, 0, "int a = pop(), b = pop(); push(a); push(b); push(a);"

"2DROP", TWO_DROP, 0, "dpop();"
"2SWAP", TWO_SWAP, 0, "dint a = dpop(), b = dpop(); dpush(a); dpush(b);"
"2DUP", TWO_DUP, 0, "push(peek(1)); push(peek(1));"
"2OVER", TWO_OVER, 0, "push(peek(3)); push(peek(3));"
"2ROT", TWO_ROT, 0, "dint c = dpop(), b = dpop(), a = dpop(); dpush(b); dpush(c); dpush(a);"
"-2ROT", MINUS_2ROT, 0, "dint c = dpop(), b = dpop(), a = dpop(); dpush(c); dpush(a); dpush(b);"

"DEPTH", DEPTH, 0, "push(vm.stack->depth());"

"SP@", SP_FETCH, 0, "push(vm.stack->ptr());"
"SP!", SP_STORE, 0, "vm.stack->set_ptr(pop());"
".S", DOT_S, 0, "vm.stack->print();"

//-----------------------------------------------------------------------------
// return stack
//-----------------------------------------------------------------------------
">R", TO_R, 0, "r_push(pop());"
"R>", FROM_R, 0, "push(r_pop());"
"RDROP", R_DROP, 0, "r_pop();"
"R@", R_FETCH, 0, "push(r_peek(0));"
"I", I, 0, "push(r_peek(0));"
"J", J, 0, "push(r_peek(2));"
"2>R", TWO_TO_R, 0, "r_dpush(dpop());"
"2R>", TWO_R_TO, 0, "dpush(r_dpop());"
"2R@", TWO_R_FETCH, 0, "dpush(r_dpeek(0));"

"RDEPTH", R_DEPTH, 0, "push(vm.rstack->depth());"

"RSP@", RSP_FETCH, 0, "push(vm.rstack->ptr());"
"RSP!", RSP_STORE, 0, "vm.rstack->set_ptr(pop());"
".RS", DOT_RS, 0, "vm.rstack->print(""R"");"

//-----------------------------------------------------------------------------
// dictionary
//-----------------------------------------------------------------------------
",", COMMA, 0, "comma(pop());"
"C,", CCOMMA, 0, "ccomma(pop());"
"HERE", HERE, 0, "push(vm.dict->here());"
"LATEST", LATEST, 0, "push(vm.dict->latest());"
"FIND", FIND, 0, "f_find(pop());"
">BODY", TO_BODY, 0, "push(pop() + CELL_SZ);"
"ALIGN", ALIGN, 0, "align();"
"ALIGNED", ALIGNED, 0, "push(aligned(pop()));"
"ALLOT", ALLOT, 0, "vm.dict->allot(pop());"
"UNUSED", UNUSED, 0, "push(vm.dict->unused());"

"MARKER", MARKER, 0, "f_marker();"
"(MARKER)", XMARKER, F_HIDDEN, "f_xmarker(body);"

//-----------------------------------------------------------------------------
// parser
//-----------------------------------------------------------------------------
"PARSE", PARSE, 0, "f_parse();"
"PARSE-WORD", PARSE_WORD, 0, "f_parse_word();"
"WORD", WORD, 0, "f_word();"

"CHAR", CHAR, 0, "f_char();"
"[CHAR]", BRACKET_CHAR, F_IMMEDIATE, "f_bracket_char();"

"NUMBER?", NUMBER_Q, 0, "f_number_q();"
"NUMBER", NUMBER, 0, "f_number();"
">NUMBER", TO_NUMBER, 0, "f_to_number();"
"CONVERT", CONVERT, 0, "f_convert();"

//-----------------------------------------------------------------------------
// strings
//-----------------------------------------------------------------------------
"COUNT", COUNT, 0, "f_count();"
".""", DOT_QUOTE, F_IMMEDIATE, "f_dot_quote();"
"(."")", XDOT_QUOTE, F_HIDDEN, "f_xdot_quote();"
"S""", S_QUOTE, F_IMMEDIATE, "f_s_quote();"
"(S"")", XS_QUOTE, F_HIDDEN, "f_xs_quote();"
"C""", C_QUOTE, F_IMMEDIATE, "f_c_quote();"
"(C"")", XC_QUOTE, F_HIDDEN, "f_xc_quote();"
".(", DOT_PAREN, F_IMMEDIATE, "f_dot_paren();"

//-----------------------------------------------------------------------------
// input
//-----------------------------------------------------------------------------
"TIB", TIB, 0, "push(mem_addr(vm.tib->tib()));"
"#TIB", NR_TIB, 0, "push(mem_addr(&vm.user->NR_IN));"
"SOURCE", SOURCE, 0, "push(mem_addr(vm.tib->tib())); push(vm.user->NR_IN);"
"REFILL", REFILL, 0, "push(f_bool(f_refill()));"
"ACCEPT", ACCEPT, 0, "f_accept();"
"EXPECT", EXPECT, 0, "f_expect();"
"KEY", KEY, 0, "f_key();"
"QUERY", QUERY, 0, "f_query();"
"SAVE-INPUT", SAVE_INPUT, 0, "f_save_input();"
"RESTORE-INPUT", RESTORE_INPUT, 0, "f_restore_input();"






//-----------------------------------------------------------------------------
// string output
//-----------------------------------------------------------------------------
"TYPE", TYPE, 0, "int size = pop(), a = pop(); print_string(a, size);"
"EMIT", EMIT, 0, "print_char(pop());"
"CR", CR, 0, "print_char(CR);"
"SPACE", SPACE, 0, "print_char(BL);"
"SPACES", SPACES, 0, "print_spaces(pop());"

//-----------------------------------------------------------------------------
// formatted number output
//-----------------------------------------------------------------------------
"<#", LESS_HASH, 0, "vm.number_output->start();"
"#", HASH, 0, "vm.number_output->add_digit();"
"#S", HASH_S, 0, "vm.number_output->add_digits();"
"HOLD", HOLD, 0, "vm.number_output->add_char(pop());"
"SIGN", SIGN, 0, "vm.number_output->add_sign(pop());"
"#>", HASH_GREATER, 0, "vm.number_output->end();"

//-----------------------------------------------------------------------------
// number output
//-----------------------------------------------------------------------------
".", DOT, 0, "print_number(pop());"
"D.", D_DOT, 0, "print_number(dpop());"
"D.R", D_DOT_R, 0, "int w = pop(); dint v = dpop(); print_number(v, w);"
"U.", U_DOT, 0, "print_unsigned_number(pop());"
".R", DOT_R, 0, "int w = pop(), v = pop(); print_number(v, w);"
"U.R", U_DOT_R, 0, "int w = pop(); uint v = pop(); print_unsigned_number(v, w);"



"RDEPTH", RDEPTH, 0, "push(vm.rstack->depth());"
"CS_DEPTH", CS_DEPTH, 0, "push(vm.cs_stack->depth());"

"THROW", THROW, 0, "f_throw();"
"ENVIRONMENT?", ENVIRONMENT_Q, 0, "int size = pop(), addr = pop(); f_environment_q(mem_char_ptr(addr), size);"

"WORDS", WORDS, 0, "f_words();"

"DABS", DABS, 0, "dpush(f_dabs(dpop()));"

"BYE", BYE, 0, "exit(EXIT_SUCCESS);"
"(DOVAR)", XDOVAR, F_HIDDEN, ";"
"LITERAL", LITERAL, F_IMMEDIATE, ";"
"(LITERAL)", XLITERAL, F_HIDDEN, ";"
"INTERPRET", INTERPRET, 0, "f_interpret();"
"QUIT", QUIT, 0, "f_quit();"
